%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 22.05.0 (http://poppler.freedesktop.org)
%%Creator: Chromium
%%LanguageLevel: 3
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 2387 1156
%%HiResBoundingBox: 0 0 2386.0798 1155.12
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011, 2022 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfOPM false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/opm { dup /pdfOPM exch def
      /setoverprintmode where{pop setoverprintmode}{pop}ifelse  } def
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16L3 {
  1 index /CIDFont resourcestatus {
    pop pop 1 index /CIDFont findresource /CIDFontType known
  } {
    false
  } ifelse
  {
    0 eq { /Identity-H } { /Identity-V } ifelse
    exch 1 array astore composefont pop
  } {
    pdfMakeFont16
  } ifelse
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
  /pdfOPM where {
    pop
    pdfOPM /setoverprintmode where{pop setoverprintmode}{pop}ifelse 
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfMask {
  /ReusableStreamDecode filter
  skipEOD
  /maskStream exch def
} def
/pdfMaskEnd { maskStream closefile } def
/pdfMaskInit {
  /maskArray exch def
  /maskIdx 0 def
} def
/pdfMaskSrc {
  maskIdx maskArray length lt {
    maskArray maskIdx get
    /maskIdx maskIdx 1 add def
  } {
    ()
  } ifelse
} def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
/CIDInit /ProcSet findresource begin
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-H def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
10 dict begin
  begincmap
  /CMapType 1 def
  /CMapName /Identity-V def
  /CIDSystemInfo 3 dict dup begin
    /Registry (Adobe) def
    /Ordering (Identity) def
    /Supplement 0 def
  end def
  /WMode 1 def
  1 begincodespacerange
    <0000> <ffff>
  endcodespacerange
  0 usefont
  1 begincidrange
    <0000> <ffff> 0
  endcidrange
  endcmap
  currentdict CMapName exch /CMap defineresource pop
end
end
%%EndProlog
%%BeginSetup
xpdf begin
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 2386.0798 1155.12 re
W
q
[0.24 0 0 -0.24 0 1155.12] cm
q
0 0 9941.667 4811.4917 re
W*
q
[29.231354 0 0 29.233782 3509.2656 -96.828392] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
1.414031 53.625473 m
50 13.029403 l
98.585968 53.117447 l
49.538155 19.171925 l
1.414031 53.625473 l
h
18.132776 51.131516 m
20.580549 83.691505 l
79.742744 84.153351 l
81.867226 47.80624 l
81.867226 86.970596 l
18.132776 86.970596 l
18.132776 51.131516 l
h
25.01425 31.734077 m
25.01425 16.677969 l
32.680859 16.677969 l
26.492149 18.202053 l
25.01425 31.734077 l
h
f*
Q
q
[55.602932 0 0 55.607552 207.33067 2711.9766] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
7.84 5.72 m
9.360001 5.72 10.56 6.13334 11.440001 6.96 c
12.320001 7.78666 12.76 8.9 12.76 10.3 c
12.76 11.713301 12.320001 12.83 11.440001 13.65 c
10.56 14.469999 9.3666 14.879999 7.860001 14.879999 c
4.52 14.879999 l
4.52 20 l
1.38 20 l
1.38 5.72 l
7.84 5.72 l
7.84 5.72 l
h
7.02 12.44 m
7.92666 12.44 8.6033 12.273339 9.05 11.94 c
9.4967 11.60666 9.72 11.06 9.72 10.299999 c
9.72 9.566659 9.503341 9.026699 9.070001 8.679999 c
8.636661 8.3333 7.960001 8.16 7.040001 8.16 c
4.520001 8.16 l
4.520001 12.440001 l
7.020001 12.440001 l
7.02 12.44 l
h
20.360001 5.72 m
25.700001 20 l
22.440001 20 l
21.360001 16.82 l
16.02 16.82 l
14.900001 20 l
11.72 20 l
17.139999 5.72 l
20.359999 5.72 l
20.360001 5.72 l
h
18.700001 9.24 m
16.84 14.48 l
20.540001 14.48 l
18.740002 9.24 l
18.700001 9.24 l
h
33.060001 5.72 m
35.086601 5.72 36.68 6.34666 37.84 7.6 c
39 8.85334 39.580002 10.58 39.580002 12.78 c
39.580002 15.06 38.996662 16.833401 37.830002 18.1 c
36.663342 19.3666 35.100002 20 33.140003 20 c
26.940002 20 l
26.940002 5.72 l
33.060001 5.72 l
33.060001 5.72 l
h
32.860001 17.360001 m
33.993301 17.360001 34.873402 16.98666 35.5 16.24 c
36.126598 15.49334 36.439999 14.4333 36.439999 13.06 c
36.439999 11.486699 36.10334 10.31 35.43 9.53 c
34.75666 8.75 33.720001 8.36 32.32 8.36 c
30.08 8.36 l
30.08 17.360001 l
32.860001 17.360001 l
h
44.900002 5.72 m
44.900002 20 l
41.760002 20 l
41.760002 5.72 l
44.900002 5.72 l
44.900002 5.72 l
h
50.779999 5.72 m
56.739998 15.299999 l
56.779999 15.299999 l
56.779999 5.719999 l
59.719997 5.719999 l
59.719997 20 l
56.579998 20 l
50.639999 10.44 l
50.599998 10.44 l
50.599998 20 l
47.66 20 l
47.66 5.72 l
50.779999 5.72 l
50.779999 5.72 l
h
69.599998 5.72 m
74.940002 20 l
71.68 20 l
70.599998 16.82 l
65.259995 16.82 l
64.139992 20 l
60.959991 20 l
66.37999 5.72 l
69.599991 5.72 l
69.599998 5.72 l
h
67.940002 9.24 m
66.080002 14.48 l
69.779999 14.48 l
67.979996 9.24 l
67.939995 9.24 l
67.940002 9.24 l
h
84.879997 5.72 m
84.879997 11.639999 l
90.459999 5.719999 l
94.379997 5.719999 l
88.799995 11.359999 l
94.919998 20 l
90.979996 20 l
86.679993 13.58 l
84.87999 15.4 l
84.87999 20 l
81.73999 20 l
81.73999 5.72 l
84.87999 5.72 l
84.879997 5.72 l
h
102.580002 5.38 m
104.6866 5.38 106.3834 6.08 107.669998 7.48 c
108.956596 8.88 109.599998 10.6934 109.599998 12.92 c
109.599998 15.0934 108.953339 16.8734 107.659996 18.26 c
106.366653 19.646601 104.673393 20.34 102.579994 20.34 c
100.473396 20.34 98.776596 19.64666 97.48999 18.26 c
96.203384 16.873341 95.55999 15.0934 95.55999 12.92 c
95.55999 10.7066 96.20665 8.896601 97.499992 7.49 c
98.793335 6.0834 100.486595 5.38 102.579994 5.38 c
102.580002 5.38 l
h
98.699997 12.92 m
98.699997 14.360001 99.039978 15.5166 99.719994 16.389999 c
100.400009 17.263399 101.353294 17.699999 102.579994 17.699999 c
103.779991 17.699999 104.726593 17.269999 105.419998 16.41 c
106.113403 15.550001 106.459999 14.3866 106.459999 12.92 c
106.459999 11.3867 106.116661 10.1866 105.43 9.32 c
104.74334 8.4534 103.786697 8.02 102.559998 8.02 c
101.360001 8.02 100.416595 8.45334 99.729996 9.32 c
99.043396 10.18666 98.699997 11.3866 98.699997 12.92 c
h
116.160004 5.72 m
119.5 15.539999 l
119.540001 15.539999 l
122.700005 5.719999 l
127.120003 5.719999 l
127.120003 20 l
124.18 20 l
124.18 9.88 l
124.139999 9.88 l
120.639999 20 l
118.220001 20 l
114.720001 9.98 l
114.68 9.98 l
114.68 20 l
111.739998 20 l
111.739998 5.72 l
116.159996 5.72 l
116.160004 5.72 l
h
140.559998 5.72 m
140.559998 8.36 l
133.020004 8.36 l
133.020004 11.42 l
139.940002 11.42 l
139.940002 13.860001 l
133.020004 13.860001 l
133.020004 17.360001 l
140.720001 17.360001 l
140.720001 20 l
129.880005 20 l
129.880005 5.72 l
140.559998 5.72 l
140.559998 5.72 l
h
150.539993 5.72 m
151.73999 5.72 152.736786 6.09 153.529999 6.83 c
154.323212 7.57 154.720001 8.5133 154.720001 9.66 c
154.720001 11.4467 153.96666 12.639999 152.460007 13.24 c
152.460007 13.28 l
152.96666 13.42666 153.363327 13.67 153.650009 14.01 c
153.936691 14.35 154.153336 14.74666 154.299988 15.200001 c
154.44664 15.653341 154.539993 16.380001 154.579987 17.380001 c
154.633331 18.686701 154.819992 19.560001 155.139984 20 c
151.999985 20 l
151.826645 19.559999 151.693298 18.733299 151.59996 17.52 c
151.493301 16.24 151.259964 15.4034 150.899963 15.01 c
150.539963 14.6166 149.953308 14.42 149.139969 14.42 c
145.979965 14.42 l
145.979965 20 l
142.839966 20 l
142.839966 5.72 l
150.539963 5.72 l
150.539993 5.72 l
h
149.440002 12.18 m
150.106659 12.18 150.630005 12.030001 151.01001 11.730001 c
151.390015 11.43 151.580017 10.900001 151.580017 10.14 c
151.580017 9.42 151.393356 8.91 151.02002 8.610001 c
150.646683 8.310001 150.113342 8.160001 149.420013 8.160001 c
145.980011 8.160001 l
145.980011 12.18 l
149.440018 12.18 l
149.440002 12.18 l
h
163.679993 5.38 m
165.346695 5.38 166.746597 5.85 167.87999 6.79 c
169.01338 7.73 169.66669 8.9734 169.84 10.520001 c
166.800003 10.520001 l
166.693344 9.81334 166.339996 9.22 165.740005 8.740001 c
165.140015 8.260001 164.453308 8.020001 163.680008 8.020001 c
162.453308 8.020001 161.500015 8.46 160.820007 9.34 c
160.139999 10.22 159.800003 11.413401 159.800003 12.92 c
159.800003 14.3867 160.143341 15.55 160.830002 16.41 c
161.516663 17.27 162.466705 17.700001 163.680008 17.700001 c
164.58667 17.700001 165.320007 17.42334 165.880005 16.870001 c
166.440002 16.316662 166.786667 15.526701 166.919998 14.500001 c
169.95999 14.500001 l
169.79999 16.313301 169.14999 17.740002 168.00999 18.780001 c
166.869995 19.82 165.42659 20.34 163.679993 20.34 c
161.586594 20.34 159.893387 19.65 158.599991 18.27 c
157.306595 16.890001 156.659988 15.106601 156.659988 12.92 c
156.659988 10.7066 157.299988 8.896601 158.579987 7.49 c
159.859985 6.0834 161.559982 5.38 163.679993 5.38 c
h
f
Q
q
[22.98839 0 0 22.990299 1318.94373 4063.8423] cm
/DeviceRGB {} CS
[1 1 1] SC
/DeviceRGB {} cs
[1 1 1] sc
5.62 5.76 m
7.92 5.76 9.5 7.24 10.16 8.68 c
8.52 9.620001 l
7.82 8.440001 6.92 7.720001 5.619999 7.720001 c
4.319999 7.720001 3.399999 8.480001 3.399999 9.520001 c
3.399999 10.5 4.02 11.1 5.36 11.6 c
6.34 11.96 l
9.12 12.98 10.539999 14.18 10.539999 16.280001 c
10.539999 18.860001 8.079999 20.300001 5.699999 20.300001 c
3.259999 20.300001 1.299999 18.84 0.699999 16.860001 c
2.419999 15.980001 l
2.919999 17.26 3.999999 18.300001 5.699999 18.300001 c
7.099999 18.300001 8.259998 17.560001 8.259998 16.300001 c
8.259998 14.960001 7.359998 14.420001 5.759998 13.820002 c
4.799998 13.460002 l
2.699998 12.680002 1.219998 11.620002 1.219998 9.440002 c
1.219998 7.320003 3.139998 5.760002 5.619998 5.760002 c
5.62 5.76 l
h
34.452 6 m
36.792 6 l
30.552 20 l
28.632 20 l
22.392 6 l
24.732 6 l
29.592001 17.220001 l
34.452 6 l
h
51.944 17.959999 m
58.284 17.959999 l
58.284 20 l
51.543999 20 l
49.743999 20 l
49.743999 6 l
51.944 6 l
58.104 6 l
58.104 8.04 l
51.944 8.04 l
51.944 11.96 l
56.683998 11.96 l
56.683998 13.96 l
51.944 13.96 l
51.944 17.959999 l
h
99.468002 6 m
92.128006 18.1 l
99.548004 18.1 l
99.548004 20 l
88.588005 20 l
95.928009 7.9 l
89.008011 7.9 l
89.008011 6 l
99.46801 6 l
99.468002 6 l
h
124.059998 20 m
122.779999 17.040001 l
115.619995 17.040001 l
114.339996 20 l
112 20 l
118.239998 6 l
120.159996 6 l
126.399994 20 l
124.059998 20 l
h
116.419998 15.22 m
121.979996 15.22 l
119.199997 8.780001 l
116.419998 15.22 l
h
167.964 6 m
170.304 6 l
164.063995 20 l
162.143997 20 l
155.903992 6 l
158.243988 6 l
163.103989 17.220001 l
167.964 6 l
h
194.51601 20 m
193.23601 17.040001 l
186.076 17.040001 l
184.79601 20 l
182.45601 20 l
188.69601 6 l
190.61601 6 l
196.85602 20 l
194.51602 20 l
194.51601 20 l
h
186.87601 15.22 m
192.436 15.22 l
189.65601 8.780001 l
186.87601 15.22 l
h
215.728 5.02 m
212.70799 5.02 l
210.64799 2.4 l
212.168 2.4 l
214.228 4.2 l
216.26799 2.4 l
217.78799 2.4 l
215.728 5.02 l
h
214.228 5.76 m
216.528 5.76 218.108 7.24 218.76799 8.68 c
217.12799 9.620001 l
216.42799 8.440001 215.52798 7.720001 214.228 7.720001 c
212.92801 7.720001 212.008 8.480001 212.008 9.520001 c
212.008 10.5 212.62799 11.1 213.968 11.6 c
214.948 11.96 l
217.728 12.98 219.14799 14.18 219.14799 16.280001 c
219.14799 18.860001 216.68799 20.300001 214.308 20.300001 c
211.868 20.300001 209.908 18.84 209.308 16.860001 c
211.028 15.980001 l
211.528 17.26 212.608 18.300001 214.308 18.300001 c
215.70799 18.300001 216.868 17.560001 216.868 16.300001 c
216.868 14.960001 215.968 14.420001 214.368 13.820002 c
213.40799 13.460002 l
211.30798 12.680002 209.82799 11.620002 209.82799 9.440002 c
209.82799 7.320003 211.74799 5.760002 214.22798 5.760002 c
214.228 5.76 l
h
254.272 6 m
258.31201 6 261.35199 9.1 261.35199 12.96 c
261.35199 16.9 258.31198 20 254.27199 20 c
249.75198 20 l
249.75198 6 l
254.27199 6 l
254.272 6 l
h
254.252 17.92 m
257.31201 17.92 259.112 15.7 259.112 12.96 c
259.112 10.3 257.31201 8.08 254.252 8.08 c
251.952 8.08 l
251.952 17.92 l
254.252 17.92 l
h
281.604 5.8 m
285.36401 5.8 288.80402 8.76 288.80402 13 c
288.80402 17.24 285.36401 20.200001 281.604 20.200001 c
277.84399 20.200001 274.40399 17.240002 274.40399 13.000001 c
274.40399 8.76 277.84399 5.800001 281.604 5.800001 c
281.604 5.8 l
h
281.604 18.120001 m
284.18399 18.120001 286.52402 16 286.52402 13.000001 c
286.52402 10.000002 284.18402 7.880001 281.604 7.880001 c
279.02399 7.880001 276.68399 10.000001 276.68399 13.000001 c
276.68399 16 279.02399 18.120001 281.604 18.120001 c
h
317.01599 6 m
317.01599 20 l
314.75598 20 l
314.75598 10.94 l
310.55597 20 l
308.69598 20 l
304.51599 10.96 l
304.51599 20 l
302.25598 20 l
302.25598 6 l
304.43597 6 l
309.63599 17.02 l
314.836 6 l
317.01599 6 l
h
f
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
